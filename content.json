{"posts":[{"title":"Python获取攻击nginx IP并自动加入ufw拒绝策略","text":"自己搭建的博客网站经常会有异常IP尝试访问网站漏洞，由于网站是hexo生成的静态的网站正常访问的情况不会出现太多400或404请求，所以将异常IP加入防火墙组织请求不会出现误封IP情况。 首先获取access.log 内容，统计异常ip请求次数。 123456789101112131415def get_ip_dict(log_file_path='/var/log/nginx/access.log'): ip_dict = Counter() log_pattern = re.compile(r'(?P&lt;ip&gt;.*?)- - \\[(?P&lt;time&gt;.*?)\\] &quot;(?P&lt;request&gt;.*?)&quot; (?P&lt;status&gt;.*?) (?P&lt;bytes&gt;.*?) &quot;(?P&lt;referer&gt;.*?)&quot; &quot;(?P&lt;ua&gt;.*?)&quot;') with open(log_file_path, mode='r') as file: for line in file: line = line.strip() result = log_pattern.match(line) if result: status = int(result.group(&quot;status&quot;)) if 400 &lt;= status &lt; 500: ip = result.group(&quot;ip&quot;) ip_dict[ip] += 1 return ip_dict 通过正则表达式匹配access.log 中请求IP和状态码： 1log_pattern = re.compile(r'(?P&lt;ip&gt;.*?)- - \\[(?P&lt;time&gt;.*?)\\] &quot;(?P&lt;request&gt;.*?)&quot; (?P&lt;status&gt;.*?) (?P&lt;bytes&gt;.*?) &quot;(?P&lt;referer&gt;.*?)&quot; &quot;(?P&lt;ua&gt;.*?)&quot;') 将请求异常超过4次的IP和请求次数组成字典作为返回值： 123if 400 &lt;= status &lt; 500: ip = result.group(&quot;ip&quot;) ip_dict[ip] += 1 查询已加入防火墙的IP，返回列表。 1234567def get_banned_ips(): ufw_status = os.popen('ufw status').read() ips = re.findall(r&quot;\\b(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.&quot; r&quot;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.&quot; r&quot;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.&quot; r&quot;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b&quot;, ufw_status) return ips 判断异常IP是否已加入防火墙，如未加入防火墙则添加新规则。 12345for ip, num in ip_dict.items(): if int(num) &gt;= 4: # print(ip) if ip.strip() not in map(str.strip, banned_ips_list): os.system(f&quot;ufw deny from {ip}&quot;) 完整代码： 123456789101112131415161718192021222324252627282930313233343536373839404142import reimport osfrom collections import Counterdef get_ip_dict(log_file_path='/var/log/nginx/access.log'): ip_dict = Counter() log_pattern = re.compile(r'(?P&lt;ip&gt;.*?)- - \\[(?P&lt;time&gt;.*?)\\] &quot;(?P&lt;request&gt;.*?)&quot; (?P&lt;status&gt;.*?) (?P&lt;bytes&gt;.*?) &quot;(?P&lt;referer&gt;.*?)&quot; &quot;(?P&lt;ua&gt;.*?)&quot;') with open(log_file_path, mode='r') as file: for line in file: line = line.strip() result = log_pattern.match(line) if result: status = int(result.group(&quot;status&quot;)) if 400 &lt;= status &lt; 500: ip = result.group(&quot;ip&quot;) ip_dict[ip] += 1 return ip_dictdef get_banned_ips(): ufw_status = os.popen('ufw status').read() ips = re.findall(r&quot;\\b(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.&quot; r&quot;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.&quot; r&quot;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.&quot; r&quot;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b&quot;, ufw_status) return ipsdef main(): log_file_path = '/var/log/nginx/access.log' ip_dict = get_ip_dict(log_file_path) banned_ips_list = get_banned_ips() for ip, num in ip_dict.items(): if int(num) &gt;= 4: # print(ip) if ip.strip() not in map(str.strip, banned_ips_list): os.system(f&quot;ufw deny from {ip}&quot;)if __name__ == &quot;__main__&quot;: main() nginx access.log已经设置，每隔一天切割打包日志。","link":"/2024/01/22/Python%E8%8E%B7%E5%8F%96%E6%94%BB%E5%87%BBnginx%20IP%E5%B9%B6%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5ufw%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5/"},{"title":"修复zsh: corrupt history file","text":"使用zsh时突然在命令行不停刷新这个报错“zsh: corrupt history file”，原因是记录历史命令的文件损坏了，shell无法读取该文件。 先重命名损坏文件：12cd ~mv .zsh_history .zsh_history_bad 将历史命令写入新的历史文件中：1strings .zsh_history_bad &gt; .zsh_history 读取历史文件中的命令记录：1fc -R .zsh_history 删除旧文件：1rm ~/.zsh_history_bad 修复完成，可以将以上命令写成脚本，方便以后使用： 12345678910#!/usr/bin/env zshmv ~/.zsh_history ~/.zsh_history_badstrings ~/.zsh_history_bad &gt; ~/.zsh_historyfc -R ~/.zsh_historyrm ~/.zsh_history_bad 将脚本加入自定义指令：1alias fixzsh=&quot;zsh /path/to/scripts/fixzsh.sh&quot;","link":"/2024/02/10/%E4%BF%AE%E5%A4%8Dzsh-corrupt-history-file/"},{"title":"测试文章","text":"","link":"/2024/02/29/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"},{"title":"移动云Terraform创建VPC、子网和虚拟网卡","text":"","link":"/2024/01/22/%E7%A7%BB%E5%8A%A8%E4%BA%91Terraform%E5%88%9B%E5%BB%BAVPC%E3%80%81%E5%AD%90%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1/"},{"title":"自动将SSH爆破IP加入黑名单脚本","text":"lastblastb指令可以显示登录失败的IP，通过统计IP登录失败数量来判断该IP是否在爆破主机。 1lastb | awk '/ssh/{print $3}' |sort | uniq -c |awk '{print $2&quot;=&quot;$1}' &gt; /root/scripts/ban_ip/BlackList 统计IP和登录失败次数用“=”作为分隔符，记录写入BlackList文件。 判断IP是否在爆破123456while IFS= read -r line; do ... if [ ${#NUM} -gt 1 ]; then ... fidone &lt; /root/scripts/ban_ip/BlackList 将循环获取IP和对应登录失败次数，判断登录失败次数是否大于9次，大于9次，判断是否存在于hosts.deny文件中，如不存在，则写入hosts.deny文件中（添加的IP会被拒绝，无需重启sshd服务）。 以下为完整代码： 12345678910111213141516#!/bin/shlastb | awk '/ssh/{print $3}' |sort | uniq -c |awk '{print $2&quot;=&quot;$1}' &gt; /root/scripts/ban_ip/BlackListwhile IFS= read -r line; do IP=$(echo &quot;$line&quot; |awk -F= '{print $1}') NUM=$(echo &quot;$line&quot; |awk -F= '{print $2}') if [ ${#NUM} -gt 1 ]; then awk -F':' '{print $2}' /etc/hosts.deny &gt; /root/scripts/ban_ip/denied_ip if ! grep -x &quot;$IP&quot; /root/scripts/ban_ip/denied_ip &gt;/dev/null ; then echo &quot;sshd:$IP:deny&quot; &gt;&gt;/etc/hosts.deny fi # grep -w &quot;$IP&quot; &quot;$(awk -F':' '{print $2}' /etc/hosts.deny)&quot; fidone &lt; /root/scripts/ban_ip/BlackList python版本： 12345678910111213141516import oscmd = '''lastb | awk '/ssh/{print $3}' |sort | uniq -c |awk '{print $2&quot;=&quot;$1}' &gt; /root/scripts/ban_ip/BlackList '''os.system(cmd)suspect_ips = open('/root/scripts/ban_ip/BlackList')banedip_list = [i.split(':')[1] for i in open('/etc/hosts.deny')]for line in suspect_ips: IP = line.split('=')[0] NUM = int(line.split('=')[1]) # print(type(IP)) if IP not in banedip_list: if NUM &gt;= 5: with open('/etc/hosts.deny', mode='a') as blacklist: blacklist.write('sshd:'+IP+':deny') 将脚本加入定时计划: 12345crontab -e# 每小时执行一次* * * * * /bin/sh /root/scripts/ban_ip/ban_ip.sh 一般加入黑名单的IP，再尝试几次被拒绝之后，就会放弃爆破了。但是爆破IP数量太多还是会影响网络和占用一定主机资源。","link":"/2024/01/21/%E8%87%AA%E5%8A%A8%E5%B0%86SSH%E7%88%86%E7%A0%B4IP%E5%8A%A0%E5%85%A5%E9%BB%91%E5%90%8D%E5%8D%95%E8%84%9A%E6%9C%AC/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"防火墙","slug":"防火墙","link":"/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"Terraform","slug":"Terraform","link":"/tags/Terraform/"},{"name":"Ecs","slug":"Ecs","link":"/tags/Ecs/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Terraform","slug":"Terraform","link":"/categories/Terraform/"},{"name":"Python","slug":"Linux/Python","link":"/categories/Linux/Python/"}],"pages":[]}